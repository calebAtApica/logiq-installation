# my global config
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).
  external_labels:
    group: '<cluster_id>_<namespace>'
    cluster_id: '<cluster_id>'
    namespace: '<namespace>'

# Alertmanager configuration
#alerting:
#  alertmanagers:
#  - static_configs:
#    - targets:
#      # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  
  - job_name: 'prometheus'

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
    - targets: ['localhost:9090']
      labels:
        group: '<cluster_id>_<namespace>'
        cluster_id: '<cluster_id>'
        namespace: '<namespace>'

  - job_name: 'node'

    static_configs:
    - targets: ['localhost:9100']
      labels:
        group: '<cluster_id>_<namespace>'
        cluster_id: '<cluster_id>'
        namespace: '<namespace>'

  - job_name: 'fluentbit'

    # metrics_path: '/api/v1/metrics/prometheus'
    metrics_path: '/metrics'
    static_configs:
    - targets: ['localhost:2021']
      labels:
        group: '<cluster_id>_<namespace>'
        cluster_id: '<cluster_id>'
        namespace: '<namespace>'
     
remote_write:
  - url: https://<end_point>/api/v1/receive
    tls_config:
        insecure_skip_verify: true

    headers:
      THANOS-TENANT: '<tenant_id>'

    write_relabel_configs:
    - action: replace
      target_label: 'tenant'
      replacement: '<tenant>'

    - action: replace
      source_labels: [__name__]
      regex: (.*)
      target_label: instance
      replacement: '<host_uid>'

      # - action: replace
      #   source_labels: [__name__]
      #   regex: 'node_(.*)'
      #   target_label: __name__
      #   replacement: mynode_${1}


